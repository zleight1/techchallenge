################
# Author: Zachary Leighton
# Date: 10/6/14
# Purpose: Dictionary Data Structure/Algorithm

Question: How will you represent a dictionary in the most efficient way you can?

Answer: The most efficient data structure to represent a dictionary is a hash or associative array. Hashes have a O(1) for retrieval operations so having a word and looking up a definition would be most efficient with a hash. Perl really shows the power of hashes as almost all data structures in perl are represented with hashes.

Question: Describe an algorithm that gets a word and finds all the words in the dictionary that are a permutation of the input.

Answer: I will describe a recursive retrieval method based off of Heap's algorithm combined with a simple retrieving from the hash above. Firstly we need to find all the permutations of the input, and if the value exists in the hash, return it. We do this by recursion.

The function Fn takes an integer which is the index N, and the string or array of characters S. 

If N == 1 then 
    //Look up S in the dictionary hash
    if Hash{S} exists    // dictionary value Hash{S} would like Apple -> A Fruit From A Tree
        return S  
    If not 
        return NULL

If N != 1, loop through S 1 to N i times, each time 

    return Fn(N-1,S) and continue

    if N%2 != 0 //odd
        swap character at position S[1] with S[N]
        repeat loop

    if N%2 == 0 //even
        swap S[i] with S[N]
        repeat loop

This will produce an output list of the values that were found in the last step of the function when N == 1, if the value of S at that time was found in the hash of dictionary values it is returned, otherwise the value was null and discarded.